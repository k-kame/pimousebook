= 開発環境の準備：概念編
== 開発の全体像
ラズパイマウスの開発で必要なのは，@<b>{開発用PC}と@<b>{ロボット（ラズパイマウス）}の２つです．開発環境のイメージを@<img>{fig_devsys}に示します．

//image[fig_devsys][開発の全体像]{
開発の全体像
//}

この環境（全部入り）は，以下の開発／実行プロセスを想定しています．

 1. PC で制御プログラムを開発する．
 1. シミュレーションで動作を確認する．
 1. 制御プログラムを github@<fn>{github} にアップロードする．
 1. PC からマウスにリモート接続．
 1. 制御プログラムを github@<fn>{github} からダウンロードする．
 1. 制御プログラムを実行．
 1. PC 上の ROS 標準ツール@<fn>{rqt}でマウスの状態をモニタリング．
 1. 1 に戻る（不具合修正など）．

//footnote[github][git（プログラムの変更履歴を管理するソフトウェア）をホストするwebサービス．無料で使える．]
//footnote[rqt][rqtなど．]

一方，上記のように，マウスを購入し，web サービスを利用しないと開発ができないわけではありません．極端な話，紙と鉛筆があれば（或いは無くても）開発は可能ですが，ここでは，素の Windows PC を想定した開発プロセスを考えます（マウスは共用物を利用．ただし，OS 用 micro SD は自前で準備）．

 1. windows 10 上のエディタ（メモ帳など）で制御プログラムを開発する．
 1. マウス（借り物）に micro SD を差して起動．
 1. PC からマウスにリモート接続してプログラムを転送・実行．

しかし，このような方法はあまりお勧めできません（人的ミスによるトラブルが多そう）．

一方で，全部入り環境の整備には結構な費用がかかるので，これを準備できる人はあまりいないと思います．具体的には，

 * ラズパイマウス：90,200円（フルキット・税込み）
 * シミュレーションが満足に動くPC：i7 搭載 PC など．独立 GPU は多分あまり寄与しない．100,000~．

そこで，全部入り環境が持つ機能

 1. プログラム作成（エディタ）
 2. 事前動作確認（シミュレーション）
 3. 変更履歴管理／転送（git/github）
 4. 動作確認（ラズパイマウス））
 
 からお金のかかる部分を割愛して，1, 3, 4 の機能を持つ開発環境／開発プロセスを想定することにします（@<table>{shoppinglist}）．ポイントは以下の通りです．

 * マウスは借りる（micro SD カードは準備）．
 * WSLは勿論インストールします．
 * シミュレーション環境は，そこそこの PC なら何とか動くらしいので，インストールしてみましょう（便利だと思ったら買えばいいのです買えば）．
 
 * 多少勉強代を出そうという人には，ラズパイの購入をお勧めします@<fn>{raspikit}．走らないだけで，マウスと同じ制御システムが構築でき，プログラムの転送にも便利です．ラズパイを開発用 PC として使ってプログラムを開発し，その micro SD カードをマウスに差して起動するという運用も可能です．

//table[shoppinglist][必要なものリスト]{
.	品名				単価		備考
---------
1	ノートPC			100,000		開発用@<fn>{devnote}
2	micro SD (32G)		1,000		
3	Raspberry Pi 3 B+	10,000		スターターキット@<fn>{raspikit}			
4	キーボード＆マウス	7260	Logicool K380 キーボード M350 マウスコンボ
5	モバイルモニタ		20,000	Full HD 13.3 インチ（cocopar など）
//}

//footnote[devnote][micros SD カードが読めること．ノートが便利．]
//footnote[raspikit][ケース，ACアダプタ，HDMIケーブル，micro SD (32G) 付き／別途キーボード，マウス，モニタが必要．@<href>{https://www.switch-science.com/, スイッチサイエンス} などで購入可能．]

== 色々な開発用 PC 環境

はじめに開発用 PC のセットアップをしますが（ROS のインストール），PC の OS が windows 10 ／ ubuntu のどちらかで，やらなければならない内容が異なります．

というわけで，開発環境セットアップの流れを@<img>{fig_devchart}にまとめてみました．作業は，大きく３つに分けることができます．

 1. windows 上で ubuntu を動かす
 2. 開発ツールのインストール
 3. マウス開発環境の準備

ここで，作業 2 と 3 は，どちらの場合でも必要ですが，PC の OS が ubuntu の場合は作業 1 が不要となります．
個人的には，「windows 上で ubuntu」はとても快適ですが，構築時のオーバーヘッドが大きいので，環境構築大好き民以外にはおススメできないかも．

一方で，ubuntu PC を選ぶと，Linux Desktop に住むという苦行（？）が待っているので，どちらがいいとは言えないかもしれません．

デュアルブート@<fn>{dualboot}という選択肢もありますが，それなりにトラブル対応できる能力が必要だと思いますし，windows をぶっ壊すとダメージが大きいです（結構トラブったりする）．

というわけで，PC を windows 用／ubuntu 用 の二台準備するという富豪的アプローチがベストではありますが，お金がかかります．

遅い PC と割り切って，Raspberry Pi で ubuntu Desktop を使うという方法もありますが，現時点（2021.3）では，arm@<fn>{fn_arm}用 ubuntu Desktop は 20.10（短期サポート版）でしかサポートされておらず，20.10 では Visual Studio Code が ubuntu software からインスト―ル出来ないという問題点があります．おそらく，他にも様々な問題点が立て続けに起こることが予想されるので，自分で藪を開いて進める人しか使うことはできないでしょう．

というわけで，開発環境構築メリット／　デメリットをまとめてみました（こういう所が環境構築大好き民）．全てを満たす環境というものはないものですね．

//image[fig_devchart][開発環境構築フローチャート]{
開発環境構築フローチャート
//}

//footnote[dualboot][一台のパソコンで起動 OS を切り替える方法．ブートローダ（grub など）を使う]
//footnote[fn_arm][Raspberry Pi で使われている CPU．X64 と記載されているのは intel/AMD 系用なので動きません]

@<table>{devenvlist}

//table[devenvlist][開発環境メリット・デメリット]{
.	方法	利点	欠点
-----------
1	win 上で ubuntu	便利・最強	構築が面倒．ちょっとお金がかかる（X）
2	ubuntu PC	構築が楽	ubuntu 上に住むことになる
3	二台持ち	win に 影響せずに ubuntu が使える	お金がかかる．メンテが面倒		
4	デュアルブート	win に 影響せずに ubuntu が使える	トラブった時に win が消えることも
5	raspi Desktop	安く ubuntu Desktop が使える	最新版でしか使えない（トラブルが起こる）．遅い．熱暴走する．
//}

というわけで，自身の技量，懐具合，趣味性癖を考慮したうえで開発環境を選び，つぎに進んでください．

 1. OS が windows 10 の人　　>  4.1 章 に進む
 2. OS が ubuntu の人　　　　> 4.2 章 に進む
