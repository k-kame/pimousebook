= ラズパイマウスを走らせる（実機編）

//lead{
前章までで，ROS の準備が終わったので，以降はマウス固有の準備を行っていきます．
また，準備の過程で，ROS を使ったプログラム開発の基礎について説明します．
//}

== ROS プログラムの構成

ここでは，ROS プログラムの構成（Arduino などのプログラム@<fn>{prg_ardu}との違い）について，カンタンに説明します（かなりはしょります．正しい理解のためには，書籍などを参照してください）．

//footnote[prg_ardu][「一般の」というか「通常の」というか，いわゆる「基本的な手続き型プログラムの違い」ぐらいの意味でとらえて下さい]

例として，センサ，モータ，コンピュータひとつずつから構成されるシステムを考えます．

@<ami>{Arduino のプログラム}

多くの場合，Arduino のプログラムは@<b>{ひとつの大きなループを繰り返す}形で実行されます（@<img>{fig_comp_arduros} 左）．つまり，ひとつのループの中で，「センサ値受信　→　制御入力の計算　→　モータ制御」が繰り返されます．この方式では，プログラムはひとつのプロセッサ上で動くので，@<b>{集中処理}と呼ばれます．

@<ami>{ROS のプログラム}

ROS では，@<b>{モータ用，センサ用，統括用のプログラムを別々に作り，各プログラム間のやりとりは通信で行う}，という風に作ります（（@<img>{fig_comp_arduros}） 右）．この方式だと，プログラムは複数のプロセッサ上でも動かすことができ，@<b>{分散処理}と呼ばれます（ひとつのプロセッサ上で動かすこともできます）．
ROS では，個々のプログラムを@<b>{ノード}，ノード間のやりとり（通信内容）を@<b>{メッセージ}と言います．
ロボットの機能は1～複数個のノードから構成されますが，これは@<b>{パッケージ}としてまとめられ，github などに登録されています．これを@<b>{リポジトリ}と呼び，github からクローン@<fn>{note_clone}して利用できます．

//image[fig_comp_arduros][Arduino と ROS のプログラムの比較]{
開発の全体像
//}

//footnote[note_clone][github ではリポジトリをダウンロードすることをクローンと言うと思っておいて下さい（嘘 50%）]

@<table>{list_repo}に，実機／シミュレーション用プログラムのもとになるリポジトリをまとめます．
実機／シミュレーションにおける利用のされ方は，以下の通りです．

 * 実機：(1) 統合プログラムが， (2) の実機デバイスノード（モーター，センサ制御プログラム）と通信してロボットを制御．
 * シミュレーション：(1) 統合プログラムが，(3) の仮想デバイスノードを介して (4) のシミュレーション環境からセンサ値を入手してロボットを制御．シミュレーション環境は，(1) 統合プログラムから得たモーター値から位置・速度などを計算してロボットを描画．

 つまり，この構成では，@<b>{統合プログラムは実機／シミュレーション共用}となっています．

//table[list_repo][マウスで利用するリポジトリ一覧]{
No.	リポジトリ名			役割									実機	シミュ
----------
1	pimouse_sim_act			統合プログラム 			                o		o
2	pimouse_ros				実機のデバイス@<fn>{note_device}ノード	o		-
3	raspimouse_ros_2		仮想機のデバイスノード	                -		o
4	raspimouse_sim			シミュレーション環境	                -		o
//}

//footnote[note_device][デバイス＝ブザー，光センサ，モータ]

== マウス開発の準備

この冊子では，マウスは借りることにしているので，以下の設定が済んだ起動用 micro SD カードが配布されているという前提で話を進めます@<href>{https://www.evernote.com/shard/s26/client/snv?noteGuid=72299e08-8340-4dac-b207-f518c737a301&noteKey=a67d2f5450dd2a7b&sn=https%3A%2F%2Fwww.evernote.com%2Fshard%2Fs26%2Fsh%2F72299e08-8340-4dac-b207-f518c737a301%2Fa67d2f5450dd2a7b&title=ROS-Raspi%2B%25E3%2582%25BB%25E3%2583%2583%25E3%2583%2586%25E3%2582%25A3%25E3%2583%25B3%25E3%2582%25B0%25E3%2582%25AC%25E3%2582%25A4%25E3%2583%2589, （後日追記）}．

 1. Raspberry Pi 3B+ 用に Ubuntu server がインストールされている
 1. Ubuntu の設定（wifi / ssh）
 1. ROS のインストールと設定
 1. マウス用ドライバの設定

上記状況において，各自で行う作業の手順は以下の通りです．

@<ami>{github での準備}

 1. リポジトリの fork

@<ami>{マウスでの準備／実行}

 1. マウスの起動
 1. ワークスペースの作成
 1. リポジトリのクローン／関連付け
 1. クローンしたプログラムの改造
 1. 実行

1. リポジトリの fork

fork とは，他人のリポジトリを自分の領域にコピーすることです（嘘 50%）．
fork したプログラムを変更して git で履歴を管理したり，開発機で変更した結果を github 経由でマウスに clone したりできます．

ここでは，アカウント k-kame のリポジトリ pimouse_sim_act.git を，自分のアカウントに fork します．

 * ブラウザのアドレス欄に@<href>{https://github.com/k-kame/pimouse_sim_act}と入力
 * ページ右上の fork ボタンを押す（参考：@<img>{fig_github_fork}）

//image[fig_github_fork][github での fork]
github での fork
//

同様に，リポジトリ 2-4 も fork しておきましょう（3, 4 は実機では使いませんが，システムに組み入れておく必要があります）．

2. マウスの起動

マウスには，キーボード，マウス，モニタが接続されているとします（ip アドレスを調べるので，リモートの場合にも必要）．

 * micro SD を差して起動，ログイン（配布 micro SD では user:ubuntu, pass:fnctcontrol）

3. ワークスペースの作成

rosws_pimouse などの名前で作成します（以降 <wsname> と記載）．

 * @<code>{mkdir -p ~/<wsname>/src}
 
4. リポジトリの clone／システムへの組み込み

以下の手順で，fork したリポジトリをマウスに clone します．<username> には github のアカウントを入れてください．

 * @<code>{cd ~/<wsname>/src}
 * @<code>{git clone http://github.com/<username>/pimouse_sim_act.git}
 * @<code>{cd ~/<wsname>}
 * @<code>{catkin_make}

同様に，他のリポジトリも clone と関連付けをしておきましょう（全て clone した後に一回 catakin_make すれば OK です）．

@<ami>{マウスの起動}

以上で準備が終わりました．ベースとなるプログラムには最低限の機能しかなく，まともに走行することすらできません・・・が，確認のために起動してみましょう．

 * @<code>{roslaunch pimouse_sim_act raspimouse_act.launch}